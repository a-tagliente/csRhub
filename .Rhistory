names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
} else{
names[["Name"]] <- NA
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
}
n <- length(company)
pb <- progress_estimated(n)
pb$tick()$print()
}
urls <-  paste0("https://www.csrhub.com/api/v2/lookup:",curlPercentEncode(company),"/company?session_id=",key)
# all scheduled requests are performed concurrently
sapply(urls, curl_fetch_multi, done=cb, pool=pool)
# This actually performs requests
out <- multi_run(pool = pool)
print(out)
alias_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(alias_df) <- c("CSRNAME","url")
return(alias_df)
}
GetAlias(c("apple co","alphabet"),key=key)
GetAlias <- function(company,key){
#create a handle object
data <- list()
h <- new_handle() %>%
handle_setheaders("Content-Type" = "application/json") %>%
handle_setform(body = toJSON(iris))
pool <- new_pool(total_con = 4, host_con = 4)
# results only available through call back function
nam_fun <-  function(response){
names <- list()
if (response[["status_code"]]==200 & length(fromJSON(rawToChar(response[["content"]])))>0){
names[["Name"]] <- fromJSON(rawToChar(response[["content"]]))[["alias"]][1]
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
} else{
names[["Name"]] <- NA
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
}
n <- length(company)
pb <- progress_estimated(n)
pb$tick()$print()
}
urls <-  paste0("https://www.csrhub.com/api/v2/lookup:",curlPercentEncode(company),"/company?session_id=",key)
# all scheduled requests are performed concurrently
sapply(urls, curl_fetch_multi, done=nam_fun, pool=pool)
# This actually performs requests
out <- multi_run(pool = pool)
print(out)
alias_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(alias_df) <- c("CSRNAME","url")
return(alias_df)
}
GetAlias <- function(company,key){
#create a handle object
data <- list()
h <- new_handle() %>%
handle_setheaders("Content-Type" = "application/json") %>%
handle_setform(body = toJSON(iris))
pool <- new_pool(total_con = 4, host_con = 4)
# results only available through call back function
nam_fun <-  function(response){
names <- list()
if (response[["status_code"]]==200 & length(fromJSON(rawToChar(response[["content"]])))>0){
names[["Name"]] <- fromJSON(rawToChar(response[["content"]]))[["alias"]][1]
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
} else{
names[["Name"]] <- NA
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
}
n <- length(company)
pb <- progress_estimated(n)
pb$tick()$print()
}
urls <-  paste0("https://www.csrhub.com/api/v2/lookup:",curlPercentEncode(company),"/company?session_id=",key)
# all scheduled requests are performed concurrently
sapply(urls, curl_fetch_multi, done=nam_fun, pool=pool)
# This actually performs requests
out <- multi_run(pool = pool)
print(out)
alias_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(alias_df) <- c("CSRNAME","url")
return(alias_df)
}
GetAlias(c("apple co","alphabet"),key=key)
result <- GetAlias(c("apple co","alphabet"),key=key)
result
#pull marketables and cut out unneccesary columns
Marketable <- read.csv(paste0("C:/Users/",username,"/Box/Heron Home Box/Raw Data/Quarterly reporting/Data/Bloomberg/Working Files/Marketables.csv"),na.strings=c("NA","NaN"," ",""), stringsAsFactors = FALSE)
#creat blank temp directory
temp <- tempfile()
# identify username on system for box path use
username <- Sys.getenv("USERNAME")
#creat blank temp directory
temp <- tempfile()
#download CSRHUB related functions
download.file("https://heronfdn.box.com/shared/static/rhohaf0m2ayc3yhys5d4titnb034dklm.r",destfile = temp)
csrfunctions <- source(temp)
GetAlias <- function(company,key){
#create a handle object
data <- list()
h <- new_handle() %>%
handle_setheaders("Content-Type" = "application/json") %>%
handle_setform(body = toJSON(iris))
pool <- new_pool(total_con = 4, host_con = 4)
# results only available through call back function
nam_fun <-  function(response){
names <- list()
if (response[["status_code"]]==200 & length(fromJSON(rawToChar(response[["content"]])))>0){
names[["Name"]] <- fromJSON(rawToChar(response[["content"]]))[["alias"]][1]
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
} else{
names[["Name"]] <- NA
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
}
n <- length(company)
pb <- progress_estimated(n)
pb$tick()$print()
}
urls <-  paste0("https://www.csrhub.com/api/v2/lookup:",curlPercentEncode(company),"/company?session_id=",key)
# all scheduled requests are performed concurrently
sapply(urls, curl_fetch_multi, done=nam_fun, pool=pool)
# This actually performs requests
out <- multi_run(pool = pool)
print(out)
alias_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(alias_df) <- c("CSRNAME","url")
return(alias_df)
}
#pull marketables and cut out unneccesary columns
Marketable <- read.csv(paste0("C:/Users/",username,"/Box/Heron Home Box/Raw Data/Quarterly reporting/Data/Bloomberg/Working Files/Marketables.csv"),na.strings=c("NA","NaN"," ",""), stringsAsFactors = FALSE)
Marketable$Name <- ifelse(is.na(Marketable$Issuer_Name),Marketable$Name,Marketable$Issuer_Name)
Marketable <- Marketable[,c(-6,-12:-15)]
# add ownership capital holdings to marketables
ownership <- read.csv(paste0("C:/Users/",username,"/Box/Heron Home Box/Raw Data/Quarterly reporting/Data/Ownership Capital/Ownership Capital.csv"),na.strings=c("NA","NaN"," ",""), stringsAsFactors = FALSE)
ownership_NAV <- 15106628
ownership$Market.Value <- ownership$Weight*ownership_NAV
dfs <- list(Marketable,ownership)
Marketable <- bind_rows(dfs)
#Add Index to marketables
Index <- read.csv(paste0("C:/Users/",username,"/Box/Heron Home Box/Raw Data/Quarterly reporting/Data/Bloomberg/Working Files/Index.csv"),na.strings=c("NA","NaN"," ",""), stringsAsFactors = FALSE)
Index$Name <- ifelse(is.na(Index$Issuer_Name),Index$Name,Index$Issuer_Name)
Index <- Index[,c(-8,-12:-15)]
Index$Market.Value <- NA
port <- bind_rows(Marketable,Index)
port <- subset(port,!grepl("CASH",port$Name))
port <- port[-which(is.na(port$Name)),]
results <- GetAlias(port$Name,key)
reult
result
results
View(results)
GetAlias <- function(company,key){
#create a handle object
data <- list()
h <- new_handle() %>%
handle_setheaders("Content-Type" = "application/json") %>%
handle_setform(body = toJSON(iris))
pool <- new_pool(total_con = 4, host_con = 4)
# results only available through call back function
nam_fun <-  function(response){
names <- list()
if (response[["status_code"]]==200 & length(fromJSON(rawToChar(response[["content"]])))>0){
names[["Name"]] <- fromJSON(rawToChar(response[["content"]]))[["alias"]][1]
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
} else{
names[["Name"]] <- NA
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
}
n <- length(company)
pb <- progress_estimated(n)
pb$tick()$print()
}
submits <- as.data.frame("search_term"=company,"url"=paste0("https://www.csrhub.com/api/v2/lookup:",curlPercentEncode(company),"/company?session_id=",key))
# all scheduled requests are performed concurrently
sapply(submits$url, curl_fetch_multi, done=nam_fun, pool=pool)
# This actually performs requests
out <- multi_run(pool = pool)
print(out)
alias_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(alias_df) <- c("CSRNAME","url")
result_df <- left_join(submits,alias_df,by="url")
return(result_df)
}
GetAlias <- function(company,key){
#create a handle object
data <- list()
h <- new_handle() %>%
handle_setheaders("Content-Type" = "application/json") %>%
handle_setform(body = toJSON(iris))
pool <- new_pool(total_con = 4, host_con = 4)
# results only available through call back function
nam_fun <-  function(response){
names <- list()
if (response[["status_code"]]==200 & length(fromJSON(rawToChar(response[["content"]])))>0){
names[["Name"]] <- fromJSON(rawToChar(response[["content"]]))[["alias"]][1]
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
} else{
names[["Name"]] <- NA
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
}
cat(length(data), " of ", length(company), " ", round(((length(data)/length(company))*100),2), "% done","\n")
}
submits <- as.data.frame("search_term"=company,"url"=paste0("https://www.csrhub.com/api/v2/lookup:",curlPercentEncode(company),"/company?session_id=",key))
# all scheduled requests are performed concurrently
sapply(submits$url, curl_fetch_multi, done=nam_fun, pool=pool)
# This actually performs requests
out <- multi_run(pool = pool)
print(out)
alias_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(alias_df) <- c("CSRNAME","url")
result_df <- left_join(submits,alias_df,by="url")
return(result_df)
}
results <- GetAlias(port$Name[1:100],key)
company <- port$Name[1:100]
submits <- as.data.frame("search_term"=company,"url"=paste0("https://www.csrhub.com/api/v2/lookup:",curlPercentEncode(company),"/company?session_id=",key))
company
submits <- as.data.frame("search_term"=company)
submits <- data.frame("search_term"=company,
"url"=paste0("https://www.csrhub.com/api/v2/lookup:",curlPercentEncode(company),"/company?session_id=",key))
View(submits)
GetAlias <- function(company,key){
#create a handle object
data <- list()
h <- new_handle() %>%
handle_setheaders("Content-Type" = "application/json") %>%
handle_setform(body = toJSON(iris))
pool <- new_pool(total_con = 4, host_con = 4)
# results only available through call back function
nam_fun <-  function(response){
names <- list()
if (response[["status_code"]]==200 & length(fromJSON(rawToChar(response[["content"]])))>0){
names[["Name"]] <- fromJSON(rawToChar(response[["content"]]))[["alias"]][1]
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
} else{
names[["Name"]] <- NA
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
}
cat(length(data), " of ", length(company), " ", round(((length(data)/length(company))*100),2), "% done","\n")
}
submits <- data.frame("search_term"=company,"url"=paste0("https://www.csrhub.com/api/v2/lookup:",curlPercentEncode(company),"/company?session_id=",key))
# all scheduled requests are performed concurrently
sapply(submits$url, curl_fetch_multi, done=nam_fun, pool=pool)
# This actually performs requests
out <- multi_run(pool = pool)
print(out)
alias_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(alias_df) <- c("CSRNAME","url")
result_df <- left_join(submits,alias_df,by="url")
return(result_df)
}
results <- GetAlias(port$Name[1:100],key)
str(submits)
?data.frame
GetAlias <- function(company,key){
#create a handle object
data <- list()
h <- new_handle() %>%
handle_setheaders("Content-Type" = "application/json") %>%
handle_setform(body = toJSON(iris))
pool <- new_pool(total_con = 4, host_con = 4)
# results only available through call back function
nam_fun <-  function(response){
names <- list()
if (response[["status_code"]]==200 & length(fromJSON(rawToChar(response[["content"]])))>0){
names[["Name"]] <- fromJSON(rawToChar(response[["content"]]))[["alias"]][1]
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
} else{
names[["Name"]] <- NA
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
}
cat(length(data), " of ", length(company), " ", round(((length(data)/length(company))*100),2), "% done","\n")
}
submits <- data.frame("search_term"=company,
"url"=paste0("https://www.csrhub.com/api/v2/lookup:",curlPercentEncode(company),"/company?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl_fetch_multi, done=nam_fun, pool=pool)
# This actually performs requests
out <- multi_run(pool = pool)
print(out)
alias_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(alias_df) <- c("CSRNAME","url")
result_df <- left_join(submits,alias_df,by="url")
return(result_df)
}
results <- GetAlias(port$Name[1:100],key)
View(results)
results[,c("search_term","CSRNAME")]
load(csRhub)
devtools::document()
?csrhub_keygen()
load(csRhub)
install()
devtools::install()
rs.restartR()
devtools::install()
?csRhub::GetAlias()
?csRhub::csrhub_keygen
?csRhub::GetAlias()
company_names <- c("apple","alphabet")results <- GetAlias(company=company_names,key=key)
company_names <- c("apple","alphabet")results <- GetAlias(company=company_names,key=key)
key <- csRhub::csrhub_keygen("ops@heron.org","Heron100")
library(RCurl)
library(RCurl)
key <- csRhub::csrhub_keygen("ops@heron.org","Heron100")
library(RCurl)
library(curl)
library(jsonlite)
library(magrittr)
httr::POST()
csrhub_keygen <- function(email,password) {
if(is.null(email)){
message("Missing Login Email")
}
else if(is.null(password)) {
message("Missing Password")
}
else{
key <- httr::POST("http://www.csrhub.com/api/v2/session/",
body=paste0("name=",email,"&password=",password))
if (is.null(content(key, 'parsed')$session_id)){
message(content(key, 'parsed')$error)
} else{
key <- content(key, 'parsed')$session_id
return(key)
}
}
}
key <- csRhub::csrhub_keygen("ops@heron.org","Heron100")
httr::POST()
devtools::install()
document()
devtools::document()
devtools::install()
key <- csRhub::csrhub_keygen("ops@heron.org","Heron100")
curl::content
httr::content()
devtools::install()
key <- csRhub::csrhub_keygen("ops@heron.org","Heron100")
library(dplyr)
dplyr::tally()
dplyr::tally
devtools::use_package("Rcurl") # Defaults to imports
key <- csRhub::csrhub_keygen("ops@heron.org","Heron100")
csrhub_keygen <- function(email,password) {
if(is.null(email)){
message("Missing Login Email")
}
else if(is.null(password)) {
message("Missing Password")
}
else{
key <- httr::POST("http://www.csrhub.com/api/v2/session/",
body=paste0("name=",email,"&password=",password))
if (is.null(httr::content(key, 'parsed')$session_id)){
message(httr::content(key, 'parsed')$error)
} else{
key <- httr::content(key, 'parsed')$session_id
return(key)
}
}
}
key <- csRhub::csrhub_keygen("ops@heron.org","Heron100")
document()
devtools::document()
devtools::install()
key <- csRhub::csrhub_keygen("ops@heron.org","Heron100")
key
curl::curl_unescape(c(" ","&",".","-"))
curl::curl_escape(c(" ","&",".","-"))
GetAlias <- function(company,key){
#create a handle object
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = jsonlite::toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
nam_fun <-  function(response){
names <- list()
if (response[["status_code"]]==200 & length(jsonlite::fromJSON(rawToChar(response[["content"]])))>0){
names[["Name"]] <- jsonlite::fromJSON(rawToChar(response[["content"]]))[["alias"]][1]
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
} else{
names[["Name"]] <- NA
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
}
cat(length(data), " of ", length(company), " ", round(((length(data)/length(company))*100),2), "% done","\n")
}
submits <- data.frame("search_term"=company,
"url"=paste0("https://www.csrhub.com/api/v2/lookup:",curl::curl_escape(company),"/company?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=nam_fun, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
alias_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(alias_df) <- c("CSRNAME","url")
result_df <- dplyr::left_join(submits,alias_df,by="url")
return(result_df[,c("search_term","CSRNAME")])
}
results <- GetAlias(company=company_names,key=key)
company_names <- c("apple","alphabet")
results <- GetAlias(company=company_names,key=key)
print(results)
devtools::document
devtools::document()
devtools::install()
GetAlias <- function(company,key){
#create a handle object
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = jsonlite::toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
nam_fun <-  function(response){
names <- list()
if (response[["status_code"]]==200 & length(jsonlite::fromJSON(rawToChar(response[["content"]])))>0){
names[["Name"]] <- jsonlite::fromJSON(rawToChar(response[["content"]]))[["alias"]][1]
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
} else{
names[["Name"]] <- NA
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
}
cat(length(data), " of ", length(company), " ", round(((length(data)/length(company))*100),2), "% done","\n")
}
submits <- data.frame("search_term"=company,
"url"=paste0("https://www.csrhub.com/api/v2/lookup:",curl::curl_escape(company),"/company?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=nam_fun, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
alias_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(alias_df) <- c("CSRNAME","url")
result_df <- dplyr::left_join(submits,alias_df,by="url")
return(result_df[,c("search_term","CSRNAME")])
}
csrhub_keygen <- function(email,password) {
if(is.null(email)){
message("Missing Login Email")
}
else if(is.null(password)) {
message("Missing Password")
}
else{
key <- httr::POST("http://www.csrhub.com/api/v2/session/",
body=paste0("name=",email,"&password=",password))
if (is.null(httr::content(key, 'parsed')$session_id)){
message(httr::content(key, 'parsed')$error)
} else{
key <- httr::content(key, 'parsed')$session_id
return(key)
}
}
}
csrhub_keygen("ops@heron.org","Heron100")
key <- csrhub_keygen("ops@heron.org","Heron100")
company_names <- c("apple","alphabet")
results <- GetAlias(company=company_names,key=key)
devtools::use_package("dplyr")
devtools::use_package("dplyr")
devtools::use_package("dplyr") # Defaults to imports
.Library
install.packages("ellipsis")
devtools::use_package("dplyr")
usethis::use_package("dplyr")
document()
devtools::document()
devtools::install()
devtools::install()
devtools::install()
install.packages("fansi")
devtools::install()
key <- csrhub_keygen("ops@heron.org","Heron100")
devtools::install()
key <- csrhub_keygen("ops@heron.org","Heron100")
key <- csRhub::csrhub_keygen("ops@heron.org","Heron100")
company_names <- c("apple","alphabet")
results <- GetAlias(company=company_names,key=key)
results <- csRhub::GetAlias(company=company_names,key=key)
devtools::document()
results <- csRhub::GetAlias(company=company_names,key=key)
devtools::install()
company_names <- c("apple","alphabet")
results <- csRhub::GetAlias(company=company_names,key=key)
key <- csRhub::csrhub_keygen("ops@heron.org","Heron100")
results <- csRhub::GetAlias(company=company_names,key=key)
results
